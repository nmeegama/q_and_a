<?php
/**
 * @file
 * The module file of the Q&A module
 * A module to add questions and answers
 *
 */

/**
 * Implements hook_menu().
 */
function q_and_a_menu() {
  $items['admin/structure/questions/manage'] = array(
    'title' => 'Q&A Admin - Mange Questions',
    'description' => 'Manage Question structure',
    'page callback' => 'q_and_a_list_questions',
    'file' => 'includes/q_and_a.question.utilities.inc',
    'access arguments' => array('administer qa questions'),
  );

  $items['admin/structure/questions/manage/add'] = array(
    'title' => 'Add a Question',
    'page callback' => 'q_and_a_question_add',
    'access arguments' => array('create qa questions'),
    'type' => MENU_LOCAL_ACTION,
  );

  // List of all entity_example_basic entities.
  $items['admin/structure/questions/manage/list'] = array(
    'title' => 'List Questions',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );


  // Add questions
  $items['q_and_a/question/add'] = array(
    'title' => 'Add Q&A Question!',
    'page callback' => 'q_and_a_question_add',
    'access arguments' => array('create qa questions'),
  );

  //Question view
  $items['q_and_a/question/%q_and_a_question'] = array(
    'title callback' => 'q_and_a_question_page_title',
    'title arguments' => array(2),
    'page callback' => 'q_and_a_question_page_view',
    'page arguments' => array(2),
    'access arguments' => array('view qa questions'),
  );

  // 'View' tab for an individual entity page.
  $items['q_and_a/question/%q_and_a_question/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  // 'Edit' tab for an individual entity page.
  $items['q_and_a/question/%q_and_a_question/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('q_and_a_question_add_form', 2),
    'access arguments' => array('edit qa questions'),
    'type' => MENU_LOCAL_TASK,
  );

  //list of questions
  $items['q_and_a/questions/list'] = array(
    'title' => 'Top Questions',
    'page callback' => 'q_and_a_question_list',
    'access arguments' => array('view qa questions'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['q_and_a/question/%q_and_a_question/stats/view'] = array(
    'page callback' => 'q_and_a_question_stats_view',
    'page arguments' => array(2),
    'access arguments' => array('view qa questions'),
    'type' => MENU_CALLBACK,
  );

  $items['q_and_a/question/%q_and_a_question/stats/vote'] = array(
    'page callback' => 'q_and_a_question_stats_vote',
    'page arguments' => array(2),
    'access arguments' => array('view qa questions'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function q_and_a_permission() {
  return array(
    'administer qa questions' =>  array(
      'title' => t('Administer Q&A question'),
      'restrict access' => TRUE,
    ),
    'view qa questions' => array(
      'title' => t('View Q&A questions'),
    ),
    'create qa questions' => array(
      'title' => t('Create Q&A questions'),
    ),
    'edit qa questions' => array(
      'title' => t('Edit Q&A questions'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function q_and_a_theme($existing, $type, $theme, $path) {
  $theme = array(
    'question_list' => array(
      'template' => 'templates/question-list',
      'variables' => array(
        'list' => NULL,
      )
    ),
    'question_row' => array(
      'template' => 'templates/question-row',
      'variables' => array(
        'row' => NULL,
      )
    ),
  );

  return $theme;
}

/**
 * Implements hook_entity_info().
 */
function q_and_a_entity_info() {

  $return['q_and_a_question'] = array(
    'label' => t('Questions'),
    'controller class' => 'QAndAQuestionController',
    'base table' => 'q_and_a_questions',
    'uri callback' => 'q_and_a_question_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'qid',
    ),
    'static cache' => TRUE,
    'bundles' => array(
      'q_and_a_question'=> array(
        'label' => 'Question',
        'admin' => array(
          'path' => 'admin/structure/q_and_a/questions/manage',
          'access arguments' => array('administer qa questions'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' =>  FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' =>  FALSE,
      ),
    )
  );

  return $return;
}

/**
 * The URI call back for the question entity
 * @param $question
 * @return array
 */
function q_and_a_question_uri($question) {
  return array(
    'path' => 'q_and_a/question' . $question->qid,
  );
}

/**
 * A callback for Q&A manage page
 * @return string
 */
function q_and_a_question_info() {
  return ('Administer Q&A \'s!');
}

/**
 * Title callbasck function for Q&A
 * @param $qa
 * @return mixed
 */
function q_and_a_question_page_title($question){
  return $question->question_title;
}

/**
 * Callback for Q&A page view
 * @param $entity
 * @param string $view_mode
 * @return array
 */
function q_and_a_question_page_view($entity, $view_mode = 'teaser') {
  // Our entity type, for convenience.
  $entity_type = 'q_and_a_question';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
  );

  // field_attach_prepare_view() lets the fields load any data they need
  // before viewing.
  field_attach_prepare_view($entity_type, array($entity->qid => $entity),
    $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->qid => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  //OK, Field API done, now we can set up some of our own data.

  $entity->content['question'] = array(
    '#type' => 'item',
    '#title' => t('Question: '),
    '#markup' => $entity->question,
  );
  $entity->content['created'] = array(
    '#type' => 'item',
    '#title' => t('Created date'),
    '#markup' => format_date($entity->created),
  );



  $entity->content['views'] = array(
    '#type' => 'item',
    '#markup' => '<span id="q_views">'.$entity->num_views.'</span>',
  );

  $entity->content['votes'] = array(
    '#type' => 'item',
    '#markup' => '<div id="q_votes"><span>'.$entity->num_votes.'</span> <button id="vote-plus" class="btn-success">+</button><button id="vote-minus" class="btn-danger">-</button></div>',
  );
  //adding JS file to increase views
  drupal_add_js(drupal_get_path('module', 'q_and_a') . '/js/q_and_a_question_view.js', 'file');

  //adding the seetings to access from the JS file above
  drupal_add_js(array('q_and_a' => array('qid' => $entity->qid)), 'setting');

  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.
  global $language;
  $langcode = $language->language;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
    $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('q_and_a_question_page_view', 'entity_view'),
    $entity->content, $entity_type);

  // And finally return the content.
  return $entity->content;
}

/**
 * Callback function for Q&A question add.
 * @return array|mixed
 */
function q_and_a_question_add() {
  $entity = entity_get_controller('q_and_a_question')->create();
  return drupal_get_form('q_and_a_question_add_form', $entity);
}

/**
 * Question add form.
 * @param $form
 * @param $form_state
 * @param $qa_question
 * @return mixed
 */
function q_and_a_question_add_form($form, &$form_state, $qa_question) {
  $form['question_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $qa_question->question_title,
    '#required' => TRUE,
  );

  $form['question'] = array(
    '#type' => 'textarea',
    '#title' => t('Question'),
    '#default_value' => $qa_question->question,
    '#required' => TRUE,
  );

  $form['question_entity'] = array(
    '#type' => 'value',
    '#value' => $qa_question,
  );

  // Attach any other fields (Before the action buttons)
  field_attach_form('q_and_a_question', $qa_question, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('q_and_a_question_delete'),
  );

  return $form;
}

/**
 * Validation handler for q_and_a_question_add_form
 */

function q_and_a_question_add_form_validate($form, &$form_state) {
  $question = $form_state['values']['question'];
  if(substr($question, -1) != '?') {
    form_set_error('question', 'A question should end with the character \'?\'');
  }
  field_attach_form_validate('q_and_a_question',  $form_state['values']['question_entity'], $form, $form_state);
}


/**
 * Implements hook_entity_info().
 */
function q_and_a_question_add_form_submit($form, &$form_state) {
  $question = $form_state['values']['question_entity'];
  $question->question_title = $form_state['values']['question_title'];
  $question->question = $form_state['values']['question'];
  field_attach_submit('q_and_a_question', $question, $form, $form_state);
  module_load_include('inc', 'q_and_a', 'includes/q_and_a.question.utilities');
  $question = q_and_a_question_save($question);
  $form_state['redirect'] = 'q_and_a/question/' . $question->qid;
}


/**
 * A callback to return the questions list
 */
function q_and_a_question_list() {
  // Load all question entities.
  module_load_include('inc', 'q_and_a', 'includes/q_and_a.question.utilities');
  $entities = q_and_a_question_load_multiple();
  $list_rows = array();
  $header_row = array(

    'question_title' => '<strong>Title</strong>',
    'question' => '<strong>Question</strong>',
    'votes' => '<strong>Votes</strong>',
    'answers' => '<strong>Answers</strong>',
    'views' => '<strong>Views</strong>'
  );
  $list_rows[] = theme('question_row', array('row' => $header_row));
  if (!empty($entities)) {
    foreach ($entities as $entity) {
      // Create row rows for our questions.
      $row = array(

          'question_title' => l($entity->question_title, 'q_and_a/question/'.$entity->qid.'/view', array('attributes' => array('class' => array('alert-link')))),
          'question' => $entity->question,
          'votes' => $entity->num_votes,
          'answers' => $entity->num_answers,
          'views' => $entity->num_views,
      );
      $list_rows[] = theme('question_row', array('row' => $row));
    }

    $list = theme('item_list', array('items' => $list_rows, 'attributes' => array('class' => array('list-unstyled', 'warning'))  ));

    return theme('question_list', array('list' => $list));


  }
}


/**
 * Fetch a question object. wildcard_load
 * function
 * @param int $qid
 *   Integer specifying the basic entity id.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return object
 *   A fully-loaded $basic object or FALSE if it cannot be loaded.
 *
 */
function q_and_a_question_load($qid = NULL, $reset = FALSE) {
  module_load_include('inc', 'q_and_a', 'includes/q_and_a.question.utilities');
  $qids = (isset($qid) ? array($qid) : array());
  $question = q_and_a_question_load_multiple($qids, array(), $reset);
  return $question ? reset($question) : FALSE;
}

/**
 * A function to increase the question views
 * @param $question
 */
function q_and_a_question_stats_view($question) {

  $question->num_views = $question->num_views + 1;
  q_and_a_question_save($question);
  print($question->num_views);
  exit;
}

/**
 * A function to handle the question votes
 * @param $question
 */
function q_and_a_question_stats_vote($question) {
  $action = $_POST['action'];
  if($action == 'plus') {
    $question->num_votes = $question->num_votes + 1;
  } else if($action == 'minus'){
    $question->num_votes = $question->num_votes - 1;
  }
  ;
  q_and_a_question_save($question);
  print($question->num_votes);
  exit;
}